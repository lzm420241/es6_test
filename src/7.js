//函数的扩展

/*
1.ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面
2.参数变量是默认声明的，所以不能用let或const再次声明
3.使用参数默认值时，函数不能有同名参数
4.如果传入undefined，将触发该参数等于默认值，null则没有这个效果
5.指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数
6.一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。这种语法行为，在不设置参数默认值时，是不会出现的
7.ES6 引入 rest 参数（形式为...变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中\
    注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错
8.扩展运算符--扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列
    该运算符主要用于函数调用
    由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了
    扩展运算符的作用：
        1.合并数组
        2.扩展运算符可以与解构赋值结合起来，用于生成数组
        3.函数的返回值
        4.扩展运算符还可以将字符串转为真正的数组
        5.任何Iterator接口的对象，都可以用扩展运算符转为真正的数组
        6.扩展运算符内部调用的是数据结构的Iterator接口，因此只要具有Iterator接口的对象，都可以使用扩展运算符，比如Map结构
        注意：ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错
9.函数的name属性，返回该函数的函数名
10.ES6 允许使用“箭头”（=>）定义函数，箭头函数有几个使用注意点：
    函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象
    不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误
    不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替
    不可以使用yield命令，因此箭头函数不能用作 Generator 函数
    箭头函数内部，还可以再使用箭头函数
    箭头函数可以绑定this对象，大大减少了显式绑定this对象的写法（call、apply、bind）
    函数绑定运算符是并排的两个冒号（::），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即this对象），绑定到右边的函数上面
11.尾调用（Tail Call）就是指某个函数的最后一步是调用另一个函数
12.函数调用自身，称为递归。如果尾调用自身，就称为尾递归
*/

function log( x, y="world") {
    console.log(x, y);
}

log('hello', 'china');


let x = 1;
function f(x, y = x) {
  console.log(y);
}

f(2) // 2

function add(...values) {
  let sum = 0;

  for (var val of values) {
    sum += val;
  }

  return sum;
}

add(2, 5, 3) // 10

//扩展运算符
console.log(...[1, 2, 3]);


// ES6的写法
function f(x, y, z) {
  // ...
}
var args = [0, 1, 2];
f(...args);
